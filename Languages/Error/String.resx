<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CDGuid" xml:space="preserve">
    <value>The CD Guid is invalid, an error is occurred during the generation
The DLL could be corrupt</value>
  </data>
  <data name="CDGuidTip" xml:space="preserve">
    <value>CD Guid is invalid</value>
  </data>
  <data name="CDKey" xml:space="preserve">
    <value>The CD Key code must be valid to perform this operation</value>
  </data>
  <data name="CDKeyTip" xml:space="preserve">
    <value>CD Key code is invalid</value>
  </data>
  <data name="DllNotFound" xml:space="preserve">
    <value>Has not been possible to locate the. dll</value>
  </data>
  <data name="DllNotFoundTip" xml:space="preserve">
    <value>Dll is missing</value>
  </data>
  <data name="GameHandle" xml:space="preserve">
    <value>The game must be opened to perform this operation</value>
  </data>
  <data name="GameHandleTip" xml:space="preserve">
    <value>Game is close</value>
  </data>
  <data name="Generic" xml:space="preserve">
    <value>A generic error was encountered</value>
  </data>
  <data name="GenericTip" xml:space="preserve">
    <value>Error</value>
  </data>
  <data name="Injection" xml:space="preserve">
    <value>Error writing to the memory of the game</value>
  </data>
  <data name="InjectionTip" xml:space="preserve">
    <value>Cannot write to memory</value>
  </data>
  <data name="Registry" xml:space="preserve">
    <value>The System Registry key does not contain the subkey 'codkey'</value>
  </data>
  <data name="RegistryEmpty" xml:space="preserve">
    <value>The System Registry key cannot be empty</value>
  </data>
  <data name="RegistryEmptyTip" xml:space="preserve">
    <value>System Registry key is empty</value>
  </data>
  <data name="RegistryIO" xml:space="preserve">
    <value>The System Registry key has been marked for deletion</value>
  </data>
  <data name="RegistryIOTip" xml:space="preserve">
    <value>System Registry key has been marked for deletion</value>
  </data>
  <data name="RegistryPeak" xml:space="preserve">
    <value>The System Registry key does does not terminate with 'Activision\Call of Duty 4'</value>
  </data>
  <data name="RegistryPeakTip" xml:space="preserve">
    <value>System Registry key must terminate with 'Activision\Call of Duty 4'</value>
  </data>
  <data name="RegistryRoot" xml:space="preserve">
    <value>The System Registry key does not begin with a valid registry root</value>
  </data>
  <data name="RegistryRootTip" xml:space="preserve">
    <value>System Registry key must begin with a valid registry root</value>
  </data>
  <data name="RegistrySecurityGet" xml:space="preserve">
    <value>The user does not have the permissions required to read from the System Registry key</value>
  </data>
  <data name="RegistrySecurityGetTip" xml:space="preserve">
    <value>Insufficient permissions to read the System Registry key</value>
  </data>
  <data name="RegistrySecuritySet" xml:space="preserve">
    <value>The user does not have the permissions required to modify the System Registry key</value>
  </data>
  <data name="RegistrySecuritySetTip" xml:space="preserve">
    <value>Insufficient permissions to write the System Registry key</value>
  </data>
  <data name="RegistryTip" xml:space="preserve">
    <value>System Registry key is invalid</value>
  </data>
  <data name="RegistryUnauthorizedAccess" xml:space="preserve">
    <value>The System Registry key is read-only, and thus cannot be written to</value>
  </data>
  <data name="RegistryUnauthorizedAccessTip" xml:space="preserve">
    <value>System Registry key is read-only</value>
  </data>
</root>